- name: pvp ovs-kernel DUT setup
  hosts: usa
  vars_files:
    - ./trex_settings.yml
  tasks:
  - debug:
      msg: Debug mode is enabled
    when: redhat_debug_modes=true

#################################################
# Check for nic to make sure its seen by kernel #
#################################################

  - stat: path=/sys/class/net/{{ dut_interface_1 }}
    register: st
  - block:
    - name: "Checking nic to be seen by kernel"
      debug:
        msg: "exiting as nic {{ dut_interface_1 }} cannot be seen by the kernel.  Please check settings or unbind the nic from a dpdk driver using driverctl"

    - meta: end_play
    when: not st.stat.exists

######################################
# Install repositories on DUT server #
######################################

  - name: Install FedoraProject Repo
    yum:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  - name: Yum clean all
    shell: yum clean all
  - name: Yum update
    yum:
      name: '*'
      state: latest
  - name: Install needed repos stage 1
    yum:
      name: aspell,aspell-en,autoconf,automake,bc,checkpolicy
  - name: Install needed repos stage 2
    yum:
      name: desktop-file-utils,dpdk-tools,driverctl,emacs,expect,gcc,gcc-c++,gdb
  - name: Install needed repos stage 3
    yum:
      name: git,graphviz,hwloc,intltool,kernel-devel,libcap-ng
  - name: Install needed repos stage 4
    yum:
      name: libcap-ng-devel,libguestfs,libguestfs-tools-c,libtool,libvirt
  - name: Install needed repos stage 5
    yum:
      name: lshw,openssl,openssl-devel,procps-ng,python3
  - name: Install needed repos stage 6
    yum:
      name: python3-six,rpm-build,selinux-policy-devel,sshpass,sysstat
  - name: Install needed repos stage 7
    yum:
      name: systemd-units,tcpdump,time,tmux,tuned-profiles-cpu-partitioning
  - name: Install needed repos stage 8
    yum:
      name: virt-install,virt-manager,wget
  - name: Installing openvswitch packages
    yum:
      name: "{{ ovs_selinux_rpm_path }}, {{ ovs_rpm_path }}"
  - name: Create symbolic link for python3
    file:
      src: "/usr/bin/python3"
      dest: "/usr/bin/python"
      state: link
  - name: Create symbolic link for pip3
    file:
      src: "/usr/bin/pip3"
      dest: "/usr/bin/pip"
      state: link

####################################################
# Tweak the system for QEMU and and OVS-DPDK usage #
####################################################

  - name: Modifying selinux params step 1
    shell: sed -i -e 's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config
  - name: Modifying selinux params step 2
    shell: setenforce permissive

#####################################################
# Modify startup parameters for hugepages and iommu #
# #####################################################

  - name: Checking for hugepages in grub step 1 (Fatal errors are normal here)
    shell: "cat /etc/default/grub | grep hugepages=32"
    register: hugepages_found1
    ignore_errors: True
  - debug:
      var: hugepages_found
    when: redhat_debug_mode == true
  - name: Adding hugepages in grub if needed step 1
    when: hugepages_found1.rc != 0
    lineinfile:
      path: /etc/default/grub
      regexp: '(GRUB_CMDLINE_LINUX=")(.*")'
      line: '\1hugepages=32 \2'
      backrefs: yes
  - name: Checking for hugepages in grub step 2 (Fatal errors are normal here)
    shell: "cat /etc/default/grub | grep hugepagesz=1G"
    register: hugepages_found2
    ignore_errors: True
  - debug:
      var: hugepages_found
    when: redhat_debug_mode == true
  - name: Adding hugepages in grub if needed step 2
    when: hugepages_found2.rc != 0
    lineinfile:
      path: /etc/default/grub
      regexp: '(GRUB_CMDLINE_LINUX=")(.*")'
      line: '\1hugepagesz=1G \2'
      backrefs: yes
  - name: Checking for hugepages in grub step 3 (Fatal errors are normal here)
    shell: "cat /etc/default/grub | grep default_hugepagesz=1G"
    register: hugepages_found3
    ignore_errors: True
  - debug:
      var: hugepages_found
    when: redhat_debug_mode == true
  - name: Adding hugepages in grub if needed step 3
    when: hugepages_found3.rc != 0
    lineinfile:
      path: /etc/default/grub
      regexp: '(GRUB_CMDLINE_LINUX=")(.*")'
      line: '\1default_hugepagesz=1G \2'
      backrefs: yes
  - name: Checking for iommu in grub step 1 (Fatal errors are normal here)
    shell: "cat /etc/default/grub | grep iommu=pt"
    register: iommu_found1
    ignore_errors: True
  - debug:
      var: iommu_found
    when: redhat_debug_mode == true
  - name: Adding iommu in grub if needed step 1
    when: iommu_found1.rc != 0
    lineinfile:
      path: /etc/default/grub
      regexp: '(GRUB_CMDLINE_LINUX=")(.*")'
      line: '\1iommu=pt \2'
      backrefs: yes
  - name: Checking for iommu in grub step 2 (Fatal errors are normal here)
    shell: "cat /etc/default/grub | grep intel_iommu=on"
    register: iommu_found2
    ignore_errors: True
  - debug:
      var: iommu_found
    when: redhat_debug_mode == true
  - name: Adding iommu in grub if needed step 2
    when: iommu_found2.rc != 0
    lineinfile:
      path: /etc/default/grub
      regexp: '(GRUB_CMDLINE_LINUX=")(.*")'
      line: '\1intel_iommu=on \2'
      backrefs: yes
  - name: Tweak the kernel for hugepages and iommu step 1
    command: "grub2-editenv - unset kernelopts"
    when: iommu_found1.rc != 0 or iommu_found2.rc != 0 or hugepages_found1.rc != 0 or hugepages_found2.rc != 0 or hugepages_found3.rc != 0
  - name: Tweak the kernel for hugepages and iommu step 2
    command: "grub2-mkconfig -o /boot/grub2/grub.cfg"
    when: iommu_found1.rc != 0 or iommu_found2.rc != 0 or hugepages_found1.rc != 0 or hugepages_found2.rc != 0 or hugepages_found3.rc != 0
    tags: ["grub"]

####################################################
# Tune isolated cpus based on t-rex-setting config #
####################################################

  - name: Enable service tuned
    service:
      name: tuned
      enabled: yes
  - name: Start service tuned, if not started
    service:
      name: tuned
      state: started
  - name: Checking for isolcpus in tuned configuration (Fatal errors are normal here)
    shell: cat /etc/tuned/cpu-partitioning-variables.conf | grep {{ vcpu_1 }},{{ vcpu_2 }},{{ vcpu_3 }},{{ vcpu_4 }}
    ignore_errors: True
    register: isolcpus_needed
  - name: Adding isolated cpus to tuned
    shell: echo isolated_cores={{ vcpu_1 }},{{ vcpu_2 }},{{ vcpu_3 }},{{ vcpu_4 }} >> /etc/tuned/cpu-partitioning-variables.conf
    when: isolcpus_needed.rc != 0
  - name: Starting cpu-partitioning tuned profile
    shell: tuned-adm profile cpu-partitioning
  - name: Checking for isolcpus in grub (Fatal errors are normal here)
    shell: cat /etc/default/grub | grep {{ vcpu_1 }},{{ vcpu_2 }},{{ vcpu_3 }},{{ vcpu_4 }}
    ignore_errors: True
    register: isolcpus_needed
  - name: Adding isolated cpus to grub
    shell: sed -i -e 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="isolcpus={{ vcpu_1 }},{{ vcpu_2 }},{{ vcpu_3 }},{{ vcpu_4 }} /'  /etc/default/grub
    when: isolcpus_needed.rc != 0
  - name: Tweak the kernel isolated list
    command: "grub2-mkconfig -o /boot/grub2/grub.cfg"
    tags: ["grub2"]
    when: isolcpus_needed.rc != 0

###################################################
# Reboot dut system for settings to take effect #
###################################################

  - name: REBOOTING DUT SERVER NOW
    reboot:
      when: iommu_found1.rc != 0 or iommu_found2.rc != 0 or hugepages_found1.rc != 0 or hugepages_found2.rc != 0 or hugepages_found3.rc != 0 or isolcpus_needed.rc !=0

#########################
# Setup libvirt service #
#########################

  - name: Set user for libvirt to hugetlbfs
    shell: sed -i -e 's/#group = "root"/group = "hugetlbfs"/' /etc/libvirt/qemu.conf
  - name: Enable service libvirtd.service
    service:
      name: libvirtd.service
      enabled: yes
  - name: Start service libvirtd.service, if not started
    service:
      name: libvirtd.service
      state: started

################################
# Starting openvswitch service #
################################

  - name: Enable service openvswitch
    service:
      name: openvswitch
      enabled: yes
  - name: Start service openvswitch, if not started
    service:
      name: openvswitch
      state: started

#######################
# Start OVS config    #
# #####################


  - name: Delete OVS if already existed
    shell: ovs-vsctl --if-exists del-br ovs_pvp_br0
  - name: Add OVS ovs_pvp_br0
    shell: ovs-vsctl add-br ovs_pvp_br0
  - name: Add port into OVS ovs_pvp_br0
    shell: ovs-vsctl add-port ovs_pvp_br0 {{ dut_interface_1 }} set Interface {{ dut_interface_1 }} ofport_request=1
  - name: Disable OVS-DPDK
    shell: ovs-vsctl set Open_vSwitch . other_config:dpdk-init=false
  - name: Restart service openvswitch
    service:
      name: openvswitch
      state: restarted

############################
# Start ovs-network for vm #
############################

  - name: Create ovs-network xml 1
    shell: echo "<network>" > /tmp/ovs-network.xml
  - name: Create ovs-network xml 2
    shell: echo "<name>vnet_ovs1</name>" >> /tmp/ovs-network.xml
  - name: Create ovs-network xml 3
    shell: echo "<forward mode='bridge'/>" >> /tmp/ovs-network.xml
  - name: Create ovs-network xml 4
    shell: echo "<bridge name='ovs_pvp_br0' />" >> /tmp/ovs-network.xml
  - name: Create ovs-network xml 5
    shell: echo "<virtualport type='openvswitch'>" >> /tmp/ovs-network.xml
  - name: Create ovs-network xml 6
    shell: echo "</virtualport>" >> /tmp/ovs-network.xml
  - name: Create ovs-network xml 7
    shell: echo "</network>" >> /tmp/ovs-network.xml
  - name: Define vnet_ovs1 network
    shell: virsh net-define ovs-network.xml
  - name: Start vnet_ovs1 network
    shell: virsh net-start vnet_ovs1
  - name: Auto-start vnet_ovs1 network
    shell: virsh net-autostart vnet_ovs1

##############################
# Setting up Virtual machine #
##############################

  - stat: path=/opt/images
    register: st
  - name: Creates directory for image storage
    file:
      path: /opt/images
      state: directory
    when: not st.stat.exists
  - stat: path=/opt/images/{{ rhel_guest_image_path }}
    register: st
  - name: Copy image to /opt/images
    copy:
      src: "{{ rhel_guest_image_path }}"
      dest: /opt/images/rhel_guest_image_pvp.qcow2
      remote_src: yes
    when: not st.stat.exists
  - name: Checking status of rhel_loopback image
    virt:
      command: list_vms
    register: all_vms
  - debug:
      var: all_vms
    when: redhat_debug_mode == true
  - name: Stopping rhel_loopback if its started
    virt:
      name: rhel_loopback
      state: destroyed
    when: '"rhel_loopback" in all_vms.list_vms'
  - name: Undefining rhel_loopback if needed
    shell: virsh undefine rhel_loopback
    when: '"rhel_loopback" in all_vms.list_vms'
  - name: Running virt-install
    shell: virt-install --connect=qemu:///system --network network=vnet_ovs1,model=virtio --network network=default --name=rhel_loopback --disk path=/opt/images/rhel_guest_image_pvp.qcow2,format=qcow2 --ram 8192 --memorybacking hugepages=on,size=1024,unit=M,nodeset=0 --vcpus=4,cpuset={{ vcpu_1 }},{{ vcpu_2 }},{{ vcpu_3 }},{{ vcpu_4 }} --check-cpu --cpu {{ dut_cpu_model }},+pdpe1gb,cell0.id=0,cell0.cpus=0,cell0.memory=8388608 --numatune mode=strict,nodeset=0 --nographics --noautoconsole --import
  - name: Setting cpu pin for vcpu 0
    shell: virsh vcpupin rhel_loopback 0 {{ vcpu_1 }}
  - name: Setting cpu pin for vcpu 1
    shell: virsh vcpupin rhel_loopback 1 {{ vcpu_2 }}
  - name: Setting cpu pin for vcpu 2
    shell: virsh vcpupin rhel_loopback 2 {{ vcpu_3 }}
  - name: Setting cpu pin for vcpu 3
    shell: virsh vcpupin rhel_loopback 3 {{ vcpu_4 }}
  - name: Setting emulator pin for guest
    shell: virsh emulatorpin rhel_loopback {{ vcpu_emulator }}
  - name: stop rhel guest
    virt:
      name: rhel_loopback
      state: shutdown
  - name: dump xml
    shell: "virsh dumpxml rhel_loopback > /tmp/rhel_loopback.xml"
  - replace:
      dest: /tmp/rhel_loopback.xml
      regexp: "unit='KiB'/>"
      replace: "unit='KiB' memAccess='shared'/>"
  - name: Undefining rhel_loopback
    virt:
      command: undefine
      name: rhel_loopback
  - name: Redefining rhel_loopback with new xml modifications 
    shell: virsh define /tmp/rhel_loopback.xml
  - name: Shutdown VM
    virt:
      name: rhel_loopback
      state: shutdown
  - name: Configuring VM for network manager
    shell: LIBGUESTFS_BACKEND=direct virt-customize -d rhel_loopback --root-password password:root --uninstall cloud-init --firstboot-command 'nmcli c | grep -o --  "[0-9a-fA-F]\{8\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{12\}" | xargs -n 1 nmcli c delete uuid' --firstboot-command 'nmcli con add con-name ovs-dpdk ifname ens2 type ethernet ip4 1.1.1.1/24' --firstboot-command 'nmcli con add con-name management ifname ens3 type ethernet' --firstboot-command 'reboot'
  - name: Starting up VM rhel_loopback
    virt:
      name: rhel_loopback
      state: running
  - name: copying virsh console script to default location
    copy:
      src: ./vm.sh
      dest: ~/vm.sh
  - name: Logging into vm rhel_loopback
    shell: ~/vm.sh login_vm rhel_loopback
  - name: Setting up subscription manager step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager register --username={{ rh_sub_username }} --password={{ rh_sub_pass }} --baseurl=cdn.stage.redhat.com --serverurl subscription.rhsm.stage.redhat.com"
    when: not qe_subscription_mode
  - name: Setting up subscription manager step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager attach --pool={{ rh_sub_pool_id }}"
    when: not qe_subscription_mode
  - name: Using QE Secret sauce to add subscription for repos
    shell: ~/vm.sh run_cmd rhel_loopback "{{ qe_subscription_command }}"
    when: qe_subscription_mode
  - name: subscribing to appstream on VM rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager repos --enable rhel-8-for-x86_64-appstream-rpms"
  - name: Running yum commandset step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y clean all"
  - name: Running yum commandset step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y update"
  - name: Running yum commandset step 3 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y install driverctl gcc kernel-devel numactl-devel tuned-profiles-cpu-partitioning wget libibverbs dpdk"
  - name: Running yum commandset step 4 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y update kernel"
  - name: Modifying grub for tuning on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "sed -i -e 's/GRUB_CMDLINE_LINUX=\"/GRUB_CMDLINE_LINUX=\"isolcpus=1,2,3 default_hugepagesz=1G hugepagesz=1G hugepages=2 /'  /etc/default/grub"
  - name: Running grub set command step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "grub2-editenv - unset kernelopts"
  - name: Running grub set command step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "grub2-mkconfig -o /boot/grub2/grub.cfg"
  - name: Setting vfio options on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "echo 'options vfio enable_unsafe_noiommu_mode=1' > /etc/modprobe.d/vfio.conf"
  - name: Binding nic to vfio-pci on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "driverctl -v set-override 0000:00:02.0 vfio-pci"
  - name: Starting tuned service step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "systemctl enable tuned"
  - name: Starting runed service step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "systemctl start tuned"
  - name: Setting isolated cores for tuning profile on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "echo isolated_cores=1,2,3 >> /etc/tuned/cpu-partitioning-variables.conf"
  - name: Starting tuned profile cpu-partitioning on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "tuned-adm profile cpu-partitioning"
  - name: Rebooting vm rhel_loopback step 1
    virt:
      name: rhel_loopback
      state: shutdown
  - name: Rebooting vm rhel_loopback step 2
    virt:
      name: rhel_loopback
      state: running
  - name: Logging into VM rhel_loopback
    shell: ~/vm.sh login_vm rhel_loopback
  - name: Removing previous pvp_results folder
    file:
      state: absent
      path: "~/pvp_results"
  - name: Creating new pvp_results folder
    file:
      state: present
      path: "~/pvp_results"
  - name: Go to the folder
    command: chdir=~/pvpresults
