#!/bin/bash
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   get_info.sh
#   Author: Qijun Ding <qding@redhat.com>
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   Copyright (c) 2013 Red Hat, Inc.
#
#   This copyrighted material is made available to anyone wishing
#   to use, modify, copy, or redistribute it subject to the terms
#   and conditions of the GNU General Public License version 2.
#
#   This program is distributed in the hope that it will be
#   useful, but WITHOUT ANY WARRANTY; without even the implied
#   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#   PURPOSE. See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public
#   License along with this program; if not, write to the Free
#   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301, USA.
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

SIBLING_ORDER=${SIBLING_ORDER:-yes}

total_numa_nodes()
{
	lscpu | sed -n '/NUMA node[[:digit:]]\+ CPU/p' | wc -l
}

nic_numa_node()
{
	local nic=${1}

	[[ $# -ne 1 ]] && exit 1

	if [[ $nic =~ [0-9a-fA-F]{4}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}\.[0-9a-fA-F] ]]
	then
		cat /sys/bus/pci/devices/${nic}/numa_node
	elif [[ $nic =~ [0-9a-fA-F]{2}:[0-9a-fA-F]{2}\.[0-9a-fA-F] ]]
	then
		cat /sys/bus/pci/devices/0000:${nic}/numa_node
	elif ip link show $nic &>/dev/null
	then
		cat /sys/class/net/$nic/device/numa_node
	else
		echo ""
	fi
}

sibling()
{
	local cpu=$1

	[[ $# -ne 1 ]] && exit 1

	sed -e "s/${cpu},//" -e "s/,${cpu}//" /sys/devices/system/cpu/cpu${cpu}/topology/thread_siblings_list
}

# cpu0 is removed from the list
cpus_online()
{
	echo $(lscpu | sed -n "/On-line CPU/ s/^.*:[[:space:]]*//p" | sed -e 's/^0,//' -e 's/^0-/1-/')
}

# cpu0 is removed from the list
cpus_on_numa()
{
	local numa=$1

	[[ $# -ne 1 ]] && exit 1

	local cpu=''
	local cpulist=''

	local i=0
	for i in $(eval echo $(lscpu | sed -n "/NUMA node${numa} CPU/ s/^.*:[[:space:]]*//p" | sed -e 's/\([0-9]\+-[0-9]\+\)/{\1}/g' -e 's/,/ /g' -e 's/-/../g'))
	do
		local s=$(cat /sys/devices/system/cpu/cpu$i/topology/thread_siblings_list | sed -e "s/\b$i\b//" -e "s/\b$i,//" -e "s/,$i\b//" -e 's/,/ /g')
		if [[ -n "$s" ]] && [[ "$SIBLING_ORDER" == "yes" ]]
		then
			cpu="$i $s"
		else
			cpu="$i"
		fi
		[[ -z "$cpulist" ]] && cpulist="$cpu" && continue

		local ii=""
		for ii in $cpu
		do
			local n="\b$ii\b"
			[[ "$cpulist" =~ $n ]] || cpulist="${cpulist} $cpu"
		done
	done

	# remove cpu0
	cpulist=$(sed "s/\b0\b//" <<<"$cpulist")

	# remove sibling of cpu0
	#s0=$(cat /sys/devices/system/cpu/cpu0/topology/thread_siblings_list | sed -e "s/\b0,//" -e "s/,0\b//")
	#[[ -n "$s0" ]] && cpulist=$(sed "s/\b$s0\b//" <<<"$cpulist")

	echo $cpulist
}

# cpus on another numa than $numa
# cpu0 is removed from the list
cpus_on_xnuma()
{
	local numa=$1

	[[ $# -ne 1 ]] && exit 1

	local cpu=''
	local cpulist=''

	local i=0
	for i in $(eval echo $(lscpu | grep 'NUMA node.* CPU(s):' | grep -v node${numa} | sed -n "1 s/^.*:[[:space:]]*//p" | sed -e 's/\([0-9]\+-[0-9]\+\)/{\1}/g' -e 's/,/ /g' -e 's/-/../g'))
	do
		local s=$(cat /sys/devices/system/cpu/cpu$i/topology/thread_siblings_list | sed -e "s/\b$i\b//" -e "s/\b$i,//" -e "s/,$i\b//" -e 's/,/ /g')
		if [[ -n "$s" ]] && [[ "$SIBLING_ORDER" == "yes" ]]
		then
			cpu="$i $s"
		else
			cpu="$i"
		fi
		[[ -z "$cpulist" ]] && cpulist="$cpu" && continue

		local ii=""
		for ii in $cpu
		do
			local n="\b$ii\b"
			[[ "$cpulist" =~ $n ]] || cpulist="${cpulist} $ii"
		done
	done

	# remove cpu0
	cpulist=$(sed "s/\b0\b//" <<<"$cpulist")

	# remove sibling of cpu0
	#s0=$(cat /sys/devices/system/cpu/cpu0/topology/thread_siblings_list | sed -e "s/\b0,//" -e "s/,0\b//")
	#[[ -n "$s0" ]] && cpulist=$(sed "s/\b$s0\b//" <<<"$cpulist")

	echo $cpulist
}

isolated_cores()
{
	local numa=$1

	if [[ -z "$numa" ]]
	then
		echo $(cpus_online | sed 's/ /,/g')
	else
		echo $(cpus_on_numa $numa | sed 's/ /,/g')
	fi
}

# cpuset generated by cpus on nic numa node
# smaller number of cpus will be used
guest_cpuset_on_numa()
{
	local numa=$1
	local count=$2

	[[ $# -ne 2 ]] && exit 1

	local cpuset=""
	local cpus=($(cpus_on_numa $numa))
	if ((count <= ${#cpus[@]}))
	then
		local i=0
		for ((i=0; i<count; i++))
		do
			[[ -z $cpuset ]] && cpuset=${cpus[i]} || cpuset="$cpuset ${cpus[i]}"
		done
	fi

	if ((numa == 0))
	then
		echo "$cpuset"
	else
		echo $cpuset | tr ' ' '\n' | tac | tr '\n' ' '
	fi
}

# cpuset generated by cpus on numa other than nic
# smaller number of cpus will be used
guest_cpuset_on_xnuma()
{
	local numa=$1
	local count=$2

	[[ $# -ne 2 ]] && return 1

	local cpuset=""
	local cpus=($(cpus_on_xnuma $numa))
	if ((count <= ${#cpus[@]}))
	then
		local i=0
		for ((i=0; i<count; i++))
		do
			[[ -z $cpuset ]] && cpuset=${cpus[i]} || cpuset="$cpuset ${cpus[i]}"
		done
	fi

	echo "$cpuset"
}

# cpu0 is used
guest_emulatorpin_cpuset()
{
	local numa=$1

	echo 0
}

# pmd_cpu_mask generated by cpus on specific numa node
# used by OVS-DPDK for datapath packet processing
# larger number of cpus on the nic numa will be used
pmd_cpu_mask()
{
	local numa=$1
	local count=$2

	[[ $# -ne 2 ]] && exit 1

	local cpumask=0
	local cpus=($(cpus_on_numa $numa))
	if ((count <= ${#cpus[@]}))
	then
		local i=0
		for ((i=0; i<count; i++))
		do
			local cpu=${cpus[${#cpus[*]}-i-1]}
            ((cpu >= 64)) && ((cpumask_h += 2**(cpu-64))) || ((cpumask_l += 2**cpu))
		done
	fi

	# FIXME when more than 128 cpus
	if ((cpumask_h))
	then
		printf "%x%016x\n" $cpumask_h $cpumask_l
	else
		printf "%x\n" $cpumask_l
	fi
}

# sets how hugepage memory is allocated across NUMA nodes
dpdk_socket_mem()
{
	local numa=$1
	local size=${2:-4096}

	[[ $# -lt 1 ]] && exit 1

	local n_nodes=$(total_numa_nodes)
	[[ $numa -ge $n_nodes ]] && { echo "FAIL: no numa $numa in the system!"; exit 1; }

	local new_dpdk_socket_mem=''

	local i=0
	for ((i=0; i<n_nodes; i++))
	do
		if ((i == numa))
		then
			[[ -z "$new_dpdk_socket_mem" ]] && \
			new_dpdk_socket_mem="${size}" || \
			new_dpdk_socket_mem="${new_dpdk_socket_mem},${size}"
			break
		else
			[[ -z "$new_dpdk_socket_mem" ]] && \
			new_dpdk_socket_mem=0 || \
			new_dpdk_socket_mem="${new_dpdk_socket_mem},0"
		fi
	done

	echo "$new_dpdk_socket_mem"
}

# non-datapath OVS-DPDK threads such as handler and revalidator threads run
# cpu0 is used
dpdk_lcore_mask()
{
	local numa=$1
	local n_pmds=${2:-0}
	local n_vcpus=${3:-0}

	echo 0x1
}


options=$(getopt -o h --long help -- "$@")
[[ $? -eq 0 ]] || {
    echo "Incorrect options provided"
    exit 1
}
eval set -- "$options"
while true
do
    case "$1" in
    -h | --help)
		echo $0 $(cat $0 | grep -e "^[a-zA-Z0-9_]\+()[[:space:]]*$" | sed 's/()//' | xargs | sed 's/ /\|/g')
        exit 0
        ;;
    --)
        shift
        break
        ;;
    esac
    shift
done

file=$0
"$@"
