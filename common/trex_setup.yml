- name: T-Rex Setup 
  hosts: trex
  vars:
    ovs_perf_url: https://github.com/chaudron/ovs_perf.git
    ovs_perf_dir: /root/ovs_perf
    xena_lib_url: https://github.com/fleitner/XenaPythonLib
    xena_lib_dir: /root/XenaPythonLib
  vars_files:
    - ./test_settings.yml
  tasks:

    # Install repositories on T-Rex server #
    - name: Install required packages for T-Rex server and tuned
      dnf:
        name:
          - bc
          - emacs
          - gcc
          - gcc-c++
          - git
          - lshw
          - pciutils
          - python3-devel
          - python3-pip
          - python3-setuptools
          - tmux
          - tuned-profiles-cpu-partitioning
          - tar
          - wget
          - net-tools
          - libibverbs
          - efibootmgr
          - "@infiniband support"

    # Install EPEL repositories
    - rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8
    - name: Install EPEL repositories
      dnf:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm
        state: present

    - name: Install packages from EPEL repo
      dnf:
        name:
          - zeromq-devel
          - sshpass
        state: present

    # Python settings
    - name: Link /usr/bin/python to /usr/bin/python3
      file:
        src: "/usr/bin/python3"
        dest: "/usr/bin/python"
        state: link
    - name: Link pip to pip3
      file:
        src: "/usr/bin/pip3"
        dest: "/usr/bin/pip"
        state: link
    - name: Install required python modules
      pip:
        name:
          - enum34
          - natsort
          - netaddr
          - matplotlib
          - scapy
          - spur
          - pyyml
          - wheel

    # Install PVP test script
    - name: git clone "{{ ovs_perf_url }}"
      git:
        repo: "{{ ovs_perf_url }}"
        clone: yes
        dest: "{{ ovs_perf_dir }}"
    - name: git clone "{{ xena_lib_url }}"
      git:
        repo: "{{ xena_lib_url }}"
        clone: yes
        dest: "{{ xena_lib_dir }}"
    - name: Install xena libraries
      shell: python setup.py install
      args:
        chdir: "{{ xena_lib_dir }}"

    # Install T-Rex
    - name: Download T-Rex
      shell:
        cmd: >
          mkdir -p "trex" &&
          [[ -f $(basename "{{ trex_url }}") ]] || wget -nv -N --no-check-certificate "{{ trex_url }}" &&
          tar xzf $(basename "{{ trex_url }}") -C trex/ &&
          pushd trex/$(basename -s '.tar.gz' "{{ trex_url }}") &&
          tar -C "{{ ovs_perf_dir }}" --strip 2 -xzf trex_client_*.tar.gz trex_client/interactive/trex &&
          tar -C "{{ ovs_perf_dir }}/trex" --strip 1 -xzf trex_client_*.tar.gz trex_client/external_libs &&
          python dpdk_setup_ports.py -c {{trex_interface_1}} {{trex_interface_2}} --force-mac -o /etc/trex_cfg.yaml &&
          popd

    - name: Checking required cmdline
      shell: "grep '{{ trex_linux_cmdline }}' /proc/cmdline"
      register: trex_linux_cmdline_found
      failed_when: trex_linux_cmdline_found.rc > 1
    - debug: var=trex_linux_cmdline_found
    - name: Tweak the kernel for trex_linux_cmdline
      shell: "grubby --args='{{ trex_linux_cmdline }}' --update-kernel=$(grubby --default-kernel)"
      when: trex_linux_cmdline_found.rc != 0

    # Setting isolated CPUs and tune to cpu-partitioning
    - name: Getting isolated core list
      shell: cat /etc/trex_cfg.yaml | grep threads | awk '{ print $2 }' | tr -d "[]"
      register: corelist
    - name: Checking isolated cpus
      shell:
        cmd: >
          grep "nohz_full={{ corelist.stdout }}" /proc/cmdline &&
          grep "rcu_nocbs={{ corelist.stdout }}" /proc/cmdline
      failed_when: false
      ignore_errors: yes
      register: tuned_ok
    - name: Set tuned
      shell: >
        sed -i '/^isolated_cores=/d' /etc/tuned/cpu-partitioning-variables.conf &&
        echo "isolated_cores={{corelist.stdout}}" >> /etc/tuned/cpu-partitioning-variables.conf &&
        tuned-adm profile cpu-partitioning
    - name: Stop irqbalance service
      systemd:
        name: irqbalance
        state: stopped
    - name: Restart tuned service
      systemd:
        name: tuned
        state: restarted
        daemon_reload: yes

    # reboot system if need
    - block:
      - name: set BootNext for UEFI
        shell: |
          efibootmgr -v && efibootmgr -n $(efibootmgr -v | grep BootCurrent | sed 's/.*: //') || true

      - name: reboot
        reboot:
      when: trex_linux_cmdline_found.rc != 0 or tuned_ok.rc != 0

    # Create pvp results folder
    - name: Create pvp results folder
      shell: mkdir -p ~/pvp_results

    # start trex server
    - name: start t-rex-64
      shell: |
        pushd trex/$(basename -s '.tar.gz' "{{ trex_url }}")
        nohup ./t-rex-64 --no-ofed-check -c $(sed -n -e 's/.*threads: \[\(.*\)\]/\1/p' /etc/trex_cfg.yaml | sed 's/,/\n/g' | wc -l) -i 1>/tmp/trex_perf.log &
        popd
    - name: wait t-rex-64 start up
      pause:
        seconds: 10
    - name: check t-rex-64
      shell: ps -ef | grep t-rex-64
      register: re
      failed_when:
      - "'_t-rex-64' not in re.stdout"
